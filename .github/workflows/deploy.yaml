name: Prepare & Update Infrastructure

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./src

    steps:

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # Create input variables from Environment Secret
      # NOTE: Avoid terraform.tfvars
      - name: Setup Terraform variables
        run: cp terraform.tfvars.example terraform.auto.tfvars

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      # Adds a comment to the pull request with results of the format, init and plan
      - name: Update Pull Request
        id: add-comment
        uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style: ${{ steps.fmt.outcome }}
            #### Terraform Initialization: ⚙️ ${{ steps.init.outcome }}
            #### Terraform Plan: ${{ steps.plan.outcome }}
            <details><summary>Show Plan</summary>
              ${process.env.PLAN}
            </details>
            *Pusher: @${{ github.actor }}, Action: ${{ github.event_name }}*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Print result of the github-script
      - name: Get result
        if: github.event_name == 'pull_request'
        run: echo "${{steps.add-comment.outputs.result}}"

      # Exit if terraform plan failed
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Apply the plan if merge to branch master
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
